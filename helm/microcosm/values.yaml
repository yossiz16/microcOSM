# ====================================================================================================
# ====================================================================================================
# ==================================Global Configurations=============================================
# ====================================================================================================
# ====================================================================================================
microcosmVersion: develop-9302179
environment: development
# cloudProvider is provider where you are going to deploy microcosm, it could be: aws, minikube
cloudProvider: minikube

# ====================================================================================================
# AWS: In case you are using the cloudProvider=aws set the below variables, We are assuming the nodes has a policies access to S3
# ====================================================================================================
AWS_S3_BUCKET: s3://microcosm

# ====================================================================================================
# EFS configuration
# ====================================================================================================
efs:
  storageClass: efs-sc
  volumeHandle: <your-handle>

# ====================================================================================================
# MINIKUBE: In case you are using the cloudProvider=minikube set the below variables
# ====================================================================================================
minikubeHostPath: /data

# ====================================================================================================
# Ingress variables
# ====================================================================================================
ingress:
  enabled: false
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  path: /
  hosts:
    - chart-example.local
  tls: []

# ====================================================================================================
# general images configuration
# ====================================================================================================
images:
  nginx: nginx:1.19.2-alpine

# ====================================================================================================
# Domain app configuration
# ====================================================================================================
domain:
  #enabled, If you set  enabled=true, you should uncomment the following configurations
  enabled: false
  # domainName, Add here your domain or the fixed IP  where the server is running
  domainName: '192.168.49.2'
  protocolo: http

# ====================================================================================================
# ====================================================================================================
# ==================================Pods Configurations===============================================
# ====================================================================================================
# ====================================================================================================

# ====================================================================================================
# Variables for microcosm database
# ====================================================================================================
webDb:
  enabled: true
  image:
    aws: '645470188746.dkr.ecr.eu-west-1.amazonaws.com/microcosm-web-db:v1'
    minikube: 'microcosm-web-db:v1'
  auth:
    user: postgres
    password: '1234'
  env:
    POSTGRES_DB: openstreetmap
  persistenceDisk:
    enabled: true
    accessMode: ReadWriteOnce
    mountPath: /var/lib/postgresql/data
    subPath: postgresql-db
    storageSize: 5Gi
  resources:
    enabled: false
    requests:
      memory: '1Gi'
      cpu: '1'
    limits:
      memory: '2Gi'
      cpu: '1'

# ====================================================================================================
# Variables for microcosm website
# ====================================================================================================
web:
  enabled: true
  image:
    aws: '645470188746.dkr.ecr.eu-west-1.amazonaws.com/microcosm-openstreetmap-website:v1'
    minikube: 'microcosm-openstreetmap-website:v1'
  replicaCount: 1
  oauth:
    key: 'aaaaaa'
  service:
    nodePort: 30100
  env:
    MAILER_ADDRESS: smtp.gmail.com
    MAILER_DOMAIN: gmail.com
    MAILER_USERNAME: microcosm.test@gmail.com
    MAILER_PASSWORD: '1234'
  resources:
    enabled: false
    requests:
      memory: '1Gi'
      cpu: '1'
    limits:
      memory: '2Gi'
      cpu: '2'

# ====================================================================================================
# Variables for microcosm database backup and restore
# ====================================================================================================
dbbackup:
  enabled: false
  image: '645470188746.dkr.ecr.eu-west-1.amazonaws.com/libot:db-backup-restore'
  schedule: '0 */1 * * *'
  env:
    DB_ACTION: backup
    CLEAN_BACKUPS: true
  resources:
    enabled: false
    requests:
      memory: '300Mi'
      cpu: '0.5'
    limits:
      memory: '400Mi'
      cpu: '0.6'

# ====================================================================================================
# Variables for microcosm for osmosis, this configuration os to get the planet dump files from apidb
# ====================================================================================================
planetDump:
  enabled: false
  image: '645470188746.dkr.ecr.eu-west-1.amazonaws.com/libot:planet-dump'
  schedule: '0 */1 * * *'
  env:
    CLEAN_BACKUPS: true
  resources:
    enabled: false
    requests:
      memory: '14Gi'
      cpu: '4'
    limits:
      memory: '16Gi'
      cpu: '4'

# ====================================================================================================
# Variables for replication-job, Configured to create replication files of minute
# ====================================================================================================
replicationJob:
  enabled: true
  image:
    aws: '645470188746.dkr.ecr.eu-west-1.amazonaws.com/libot:replication-job'
    minikube: 'microcosm-replication-job:v1'
  persistenceDisk:
    enabled: true
    accessMode: ReadWriteMany
    mountPath: /app/data
    subPath: replication-dir/minute
    # In case cloudProvider: aws
    storageSize: 5Gi
  resources:
    enabled: false
    requests:
      memory: '2Gi'
      cpu: '1'
    limits:
      memory: '2Gi'
      cpu: '2'

# ====================================================================================================
# Variables for microcosm to populate the apidb
# ====================================================================================================
populateApidb:
  enabled: true
  image:
    aws: '645470188746.dkr.ecr.eu-west-1.amazonaws.com/libot:populate-apidbv2'
    minikube: 'microcosm-populate-apidb:v1'
  env:
    URL_FILE_TO_IMPORT: 'https://download.geofabrik.de/europe/andorra-latest.osm.pbf'
  resources:
    enabled: false
    requests:
      memory: '1Gi'
      cpu: '1'
    limits:
      memory: '2Gi'
      cpu: '2.5'

# ====================================================================================================
# Variables for earth tiles database for rendering
# ====================================================================================================
earthTilesDb:
  enabled: true
  image:
    aws: '645470188746.dkr.ecr.eu-west-1.amazonaws.com/microcosm-tiles-db:v1'
    minikube: 'microcosm-tiles-db:v1'
  auth:
    user: postgres
    password: '1234'
  env:
    POSTGRES_DB: gis
  persistenceDisk:
    enabled: true
    accessMode: ReadWriteOnce
    mountPath: /var/lib/postgresql/data
    subPath: external-data-db
    storageSize: 5Gi
  resources:
    enabled: false
    requests:
      memory: '1Gi'
      cpu: '1'
    limits:
      memory: '2Gi'
      cpu: '1'

# ====================================================================================================
# Variables for earth tiles loader
# ====================================================================================================
earthTilesLoader:
  enabled: true
  image:
    aws: '645470188746.dkr.ecr.eu-west-1.amazonaws.com/microcosm-earth-tiles-loader:v1'
    minikube: 'microcosm-earth-tiles-loader:v1'
  env:
    LOAD_EXTERNAL_SCHEDULE_CRON: '0 4 * * 0'
  resources:
    enabled: false
    requests:
      memory: '1Gi'
      cpu: '1'
    limits:
      memory: '2Gi'
      cpu: '2'

# ====================================================================================================
# Variables for vector-tiles-db
# ====================================================================================================
vectorTilesDb:
  enabled: true
  image:
    aws: '645470188746.dkr.ecr.eu-west-1.amazonaws.com/microcosm-tiles-db'
    minikube: 'microcosm-tiles-db:v1'
  auth:
    user: postgres
    password: '1234'
  env:
    POSTGRES_HOST: vector-tiles-db
    POSTGRES_DB: tiler-osm
    POSTGRES_PORT: 5432
  persistenceDisk:
    enabled: true
    accessMode: ReadWriteOnce
    mountPath: /var/lib/postgresql/data
    subPath: tegola-postgresql-db
    # In case cloudProvider: aws
    storageSize: 5Gi
  resources:
    enabled: false
    requests:
      memory: '1Gi'
      cpu: '1'
    limits:
      memory: '2Gi'
      cpu: '2.5'

# ====================================================================================================
# Variables for microcosm to populate the vector tiles db
# ====================================================================================================
populateVectorTilesDb:
  enabled: true
  image:
    aws: '645470188746.dkr.ecr.eu-west-1.amazonaws.com/populate-vector-tiles-db:v1'
    minikube: 'microcosm-populate-vector-tiles-db:v1'
  resources:
    enabled: false
    requests:
      memory: '1Gi'
      cpu: '1'
    limits:
      memory: '2Gi'
      cpu: '2.5'

# ====================================================================================================
# Variables for imposm
# ====================================================================================================
imposm:
  enabled: true
  image:
    aws: '645470188746.dkr.ecr.eu-west-1.amazonaws.com/microcosm-imposm:v1'
    minikube: 'microcosm-imposm:v1'
  env:
    CONFIG_EXPIRED_TILES_ZOOM: 14
    CONFIG_REPLICATION_INTERVAL: 1m
  persistenceDisk:
    data:
      enabled: true
      accessMode: ReadWriteOnce
      mountPath: /mnt/data/
      subPath: imposm-data
      storageSize: 5Gi
    expired:
      enabled: true
      accessMode: ReadWriteMany
      mountPath: /mnt/expired-tiles
      subPath: imposm-expired
      storageSize: 5Gi
  resources:
    enabled: false
    requests:
      memory: '1Gi'
      cpu: '1'
    limits:
      memory: '2Gi'
      cpu: '2'

# ====================================================================================================
# Variables for tegola
# ====================================================================================================
tegola:
  enabled: true
  image:
    aws: '645470188746.dkr.ecr.eu-west-1.amazonaws.com/microcosm-tegola:v1'
    minikube: 'microcosm-tegola:v1'
  replicaCount: 1
  service:
    nodePort: 30101
  env:
    URI_PREFIX: mvt
    TILER_SERVER_PORT: 80
    TILER_CACHE_TYPE: file
    TILER_CACHE_BASEPATH: /mnt/data
    TILER_CACHE_MAX_ZOOM: 19
    TILER_CACHE_MIN_ZOOM: 14
    EXPIRE_TILES_DIR: /mnt/expiretiles
    TILER_CACHE_UPDATE_INTERVAL: 60
    # in case s3
    # TILER_CACHE_BUCKET: microcosm-tiler
    # TILER_CACHE_REGION: us-east-1
    # TILER_CACHE_AWS_ACCESS_KEY_ID: xyz
    # TILER_CACHE_AWS_SECRET_ACCESS_KEY: xyz/q
  # In case you use TILER_CACHE_TYPE: file with  persistenceDisk
  persistenceDisk:
    enabled: true
    accessMode: ReadWriteOnce
    mountPath: /mnt/data
    # In case cloudProvider: aws
    storageSize: 5Gi
  resources:
    enabled: false
    requests:
      memory: '1Gi'
      cpu: '1'
    limits:
      memory: '2Gi'
      cpu: '2'

# ====================================================================================================
# Variables for osm2pgsql
# ====================================================================================================
osm2pgsql:
  enabled: true
  image:
    aws: '645470188746.dkr.ecr.eu-west-1.amazonaws.com/microcosm-osm2pgsql:v1'
    minikube: 'microcosm-osm2pgsql:v1'
  env:
    UPDATE_INTERVAL: 60
    REPLICATION_DIRECTORY: /mnt/replication
    EXPIRED_DIRECTORY: /mnt/expired
  persistenceDisk:
    enabled: true
    accessMode: ReadWriteMany
    subPath: osm2pgsql-expired
    storageSize: 5Gi
  resources:
    enabled: false
    requests:
      memory: '1Gi'
      cpu: '1'
    limits:
      memory: '2Gi'
      cpu: '2'

# ====================================================================================================
# Variables for rasterized-tiles-db
# ====================================================================================================
rasterizedTilesDb:
  enabled: true
  image:
    aws: '645470188746.dkr.ecr.eu-west-1.amazonaws.com/microcosm-tiles-db'
    minikube: 'microcosm-tiles-db:v1'
  auth:
    user: postgres
    password: '1234'
  env:
    POSTGRES_HOST: tiler-db
    POSTGRES_DB: tiler-osm
    POSTGRES_PORT: 5432
  persistenceDisk:
    enabled: true
    accessMode: ReadWriteOnce
    mountPath: /var/lib/postgresql/data
    subPath: renderer-postgresql-db
    storageSize: 5Gi
  resources:
    enabled: false
    requests:
      memory: '1Gi'
      cpu: '1'
    limits:
      memory: '2Gi'
      cpu: '2.5'

# ====================================================================================================
# Variables for mod-tile
# ====================================================================================================
modTile:
  enabled: true
  image:
    aws: '645470188746.dkr.ecr.eu-west-1.amazonaws.com/microcosm-mod-tile:v1'
    minikube: 'microcosm-mod-tile:v1'
  replicaCount: 1
  service:
    nodePort: 30102
  env:
    EXPIRED_DIRECTORY: /mnt/expired
    TILE_EXPIRE_MIN_ZOOM: 14
  persistenceDisk:
    enabled: true
    accessMode: ReadWriteOnce
    mountPath: /var/lib/mod_tile
    subPath: mod_tile_cache
    storageSize: 5Gi
  resources:
    enabled: false
    requests:
      memory: '1Gi'
      cpu: '1'
    limits:
      memory: '2Gi'
      cpu: '2'

# ====================================================================================================
# Variables for replication-merger, Configured to create the replication files by,hour, day or week
# ====================================================================================================

replicationMerger:
  enabled: true
  image:
    aws: '645470188746.dkr.ecr.eu-west-1.amazonaws.com/libot:replication-merger'
    minikube: 'microcosm-replication-merger:v1'
  persistenceDisk:
    enabled: true
    accessMode: ReadWriteMany
    mountPath: /mnt/data
    subPath: replication-dir
    storageSize: 5Gi
  resources:
    enabled: false
    requests:
      memory: '2Gi'
      cpu: '1'
    limits:
      memory: '2Gi'
      cpu: '2'

# ====================================================================================================
# The Replication Http server, serves replication of minutes, and merged hours, days and weeks.
# ====================================================================================================
replicationHttpServer:
  enabled: true
  persistenceDisk:
    enabled: true
    accessMode: ReadWriteMany
    mountPath: /usr/share/nginx/html
    subPath: replication-dir
    # In case cloudProvider: aws
    storageSize: 5Gi
  resources:
    enabled: false
    requests:
      memory: '2Gi'
      cpu: '1'
    limits:
      memory: '2Gi'
      cpu: '2'
